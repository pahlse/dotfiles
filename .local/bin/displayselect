#!/bin/sh

# A UI for detecting and selecting all displays. Probes xrandr for connected
# displays and lets user select one to use. User may also select "manual
# selection" which opens arandr.

res_far=1368x768
res_close=1600x900

twoscreen() { # If multi-monitor is selected and there are two screens.

    mirror=$(printf "no\\nyes" | dmenu -i -p "Mirror displays?")
    # Mirror displays using native resolution of primary display and a scaled
    # version for the secondary display
    if [ "$mirror" = "yes" ]; then
        primary=$(echo "$screens" | head -1)
        secondary=$(echo "$screens" | grep -v "$primary")

        res_primary="$res_far"
        # res_primary=$(xrandr --query | grep ^"$primary" | sed 's/+.*//' | sed 's/.* //')
        res_secondary=$(xrandr --query | sed -n "/^$secondary/,/\+/p" | \
            tail -n 1 | awk '{print $1}')

        res_pri_x=$(echo "$res_primary" | sed 's/x.*//')
        res_pri_y=$(echo "$res_primary" | sed 's/.*x//')
        res_sec_x=$(echo "$res_secondary" | sed 's/x.*//')
        res_sec_y=$(echo "$res_secondary" | sed 's/.*x//')

        scale_x=$(echo "$res_pri_x / $res_sec_x" | bc -l)
        scale_y=$(echo "$res_pri_y / $res_sec_y" | bc -l)

	xrandr --output "$primary" --mode "$res_primary" --scale 1.0x1.0 \
            --output "$secondary" --auto --same-as "$primary" \
            --scale "$scale_x"x"$scale_y"

    else
        primary=$(echo "$screens" | head -1)
        secondary=$(echo "$screens" | grep -v "$primary")
        direction=$(printf "left\\nright" | dmenu -i -p "What side of $primary should $secondary be on?")
        xrandr --output "$primary" --mode "$res_far" --scale 1.0x1.0 --output "$secondary" --"$direction"-of "$primary" --auto --scale 1.0x1.0
    fi
    }

morescreen() { # If multi-monitor is selected and there are more than two screens.
	primary=$(echo "$screens" | dmenu -i -p "Select primary display:")
	secondary=$(echo "$screens" | grep -v "$primary" | dmenu -i -p "Select secondary display:")
	direction=$(printf "left\\nright" | dmenu -i -p "What side of $primary should $secondary be on?")
	tertiary=$(echo "$screens" | grep -v "$primary" | grep -v "$secondary" | dmenu -i -p "Select third display:")
	xrandr --output "$primary" --auto --output "$secondary" --"$direction"-of "$primary" --auto --output "$tertiary" --"$(printf "left\\nright" | grep -v "$direction")"-of "$primary" --auto
	}

multimon() { # Multi-monitor handler.
	case "$(echo "$screens" | wc -l)" in
		2) twoscreen ;;
		*) morescreen ;;
	esac ;}

onescreen() { # If only one output available or chosen.
    if [ "$1" = "eDP1" ]; then
	xrandr --output "$1" --mode "$res_close" --scale 1.0x1.0 $(echo "$allposs" | grep -v "\b$1" | awk '{print "--output", $1, "--off"}' | paste -sd ' ' -)

    else
	xrandr --output "$1" --auto --scale 1.0x1.0 $(echo "$allposs" | grep -v "\b$1" | awk '{print "--output", $1, "--off"}' | paste -sd ' ' -)
    fi
	}

postrun() { # Stuff to run to clean up.
	setbg		# Fix background if screen size/arangement has changed.
	remaps		# Re-remap keys if keyboard added (for laptop bases)
	{ killall dunst ; setsid -f dunst ;} >/dev/null 2>&1 # Restart dunst to ensure proper location on screen
	}

# Get all possible displays
allposs=$(xrandr -q | grep "connected")

# Get all connected screens.
screens=$(echo "$allposs" | awk '/ connected/ {print $1}')

# If there's only one screen
[ "$(echo "$screens" | wc -l)" -lt 2 ] &&
	{ onescreen "$screens"; postrun; notify-send "ðŸ’» Only one screen detected." "Using it in its optimal settings...";  exit ;}

# Get user choice including multi-monitor and manual selection:
chosen=$(printf "%s\\nmulti-monitor\\nmanual selection" "$screens" | dmenu -i -p "Select display arangement:") &&
case "$chosen" in
	"manual selection") arandr ; exit ;;
	"multi-monitor") multimon ;;
	*) onescreen "$chosen" ;;
esac

postrun
